import discord
from dateutil.tz import tzoffset
from datetime import datetime, timedelta
from discord.ext import commands
from usersettings import params
from configs import config, con_config
from generallib import structs, textfile, mainlib
from mycommands import simplecomm, dilogcomm, moderationcomm, systemcomm, datacommm, settingscomm, infocomm, dsVote


# –¢–∞–∫ –∫–∞–∫ –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –≤ settings, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é —Å –∫–ª—é—á–æ–º prefix.
bot = commands.Bot(command_prefix=con_config.settings['prefix'])
current_vote: dsVote.Vote = None
guild: discord.Guild
UserStats = []


@bot.event
async def on_ready():
    global guild, UserStats
    guild = bot.get_guild(con_config.settings['home_guild_id'])
    readlist = textfile.ReadSymbolsStat(config.params['SymbolsStatisticsFile'])
    await params.init_dictinoraies()
    await dilogcomm.printlog(bot=bot,
                             message='–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏: {0}'.format(params.shutdownparams['time']))
    time: datetime = datetime.strptime(params.shutdownparams['time'], "%Y-%m-%d %H:%M:%S")
    n = 4
    time.astimezone(tzoffset("UTC+{}".format(n), n * 60 * 60))
    await dilogcomm.printlog(bot=bot,
                             message=await datacommm.calc_alltxtchannels_stats_after_time(guild=guild, time=time,
                                                                                          MainStatList=UserStats))
    if len(readlist) == 0:
        for user in guild.members:
            UserStats.append(structs.userstats(user.id, 0))
    else:
        UserStats = readlist
    await dilogcomm.printlog(bot=bot, message='bot online')


@bot.event
async def on_message(mes: discord.Message):
    datacommm.stats_update(mes, UserStats)
    await bot.process_commands(message=mes)


@bot.event
async def on_member_join(member):
    UserStats.append(structs.userstats(ID=member.id))
    await member.add_roles(mainlib.Findrole(rolelist=guild.roles, serchrole='–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å'))


@bot.event
async def on_voice_state_update(member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
    await datacommm.voice_stats_update(bot=bot, Stats_List=UserStats, member=member, before=before, after=after)


@bot.event
async def on_reaction_add(react: discord.Reaction, user):
    if current_vote is None:
        return
    current_vote.add_vote(emoji=react, user=user)


# –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
@bot.command()
async def tm(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    await simplecomm.hello(ctx)


@bot.command(name='add_calc')
async def add_calc(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    time: datetime = datetime.strptime(params.shutdownparams['time'], "%Y-%m-%d %H:%M:%S")
    n = 4
    time.astimezone(tzoffset("UTC+{}".format(n), n*60*60))
    counter: int = 0
    async for message in ctx.channel.history(limit=100, after=time):
        counter += 1
    await ctx.send(counter)


@bot.command()
async def channels(ctx: discord.ext.commands.Context):
    g = ctx.author.guild
    answer: str = str(len(g.channels)) + '\n'
    for channel in g.channels:
        answer += channel.name + '\n'
    await ctx.send(answer)


@bot.command()
async def txtchannels(ctx: discord.ext.commands.Context):
    g = ctx.author.guild
    counter: int = 0
    answer: str = ''
    for channel in g.channels:
        if issubclass(type(channel), discord.TextChannel):
            answer += channel.name + '\n'
            counter += 1
    answer = str(counter) + '\n' + answer

    await ctx.send(answer)


# –ù–∞—á–∏–Ω–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
@bot.command(name='vote')
async def boot_vote(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    global current_vote
    if current_vote is not None:
        await ctx.send('```–û–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤–µ–¥—ë—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ```')
        return
    current_vote = dsVote.create_vote(bot=bot, ctx=ctx)
    await current_vote.show()
    del current_vote
    current_vote = None


# –¢–µ—Å—Ç–æ–≤–æ–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.command()
async def test(ctx: discord.ext.commands.Context):
    await ctx.message.delete()


@bot.command()
async def count(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    counter: int = 0
    async for mes in ctx.channel.history(limit=10000, oldest_first=None):
        counter += 1
    await ctx.send('``` –≤ –¥–∞–Ω–Ω–æ –∫–∞–Ω–∞–ª–µ {0} —Å–æ–æ–±—â–µ–Ω–∏–π ```'.format(counter))


@bot.command()
async def calc(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    newstat = await datacommm.calculate_txtchannel_stats(ctx.channel)
    answer = ''
    for stat in newstat:
        answer += '{0} –Ω–∞–ø–µ—á–∞—Ç–∞–ª {1} —Å–∏–º–≤–æ–ª–æ–≤\n'.format(stat.name, stat.symb_counter)
    await ctx.send('```{0}```'.format(answer))


@bot.command()
@commands.has_guild_permissions(administrator=True)
async def calc_all(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    g = ctx.author.guild
    new_stats = []
    counter: int = 0
    for channel in g.channels:
        if issubclass(type(channel), discord.TextChannel):
            counter += 1
            ch_stat = await datacommm.calculate_txtchannel_stats(channel)
            new_stats = datacommm.merge_stats(new_stats, ch_stat)
    answer = '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ {0} –∫–∞–Ω–∞–ª–æ–≤:\n'.format(counter)
    for stat in new_stats:
        answer += '{0} –Ω–∞–ø–µ—á–∞—Ç–∞–ª {1} —Å–∏–º–≤–æ–ª–æ–≤\n'.format(stat.name, stat.symb_counter)
    await ctx.send('```{0}```'.format(answer))


@bot.command(name='print')
async def printer(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    print(str(ctx.message.content))


@bot.command(name='fixname')
async def fix_name(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    stat: structs.userstats = structs.searchid(UserStats, ctx.message.author.id)
    stat.name = ctx.message.author.name + '#' + str(ctx.message.author.discriminator)


@bot.command(name='react')
async def reaction(ctx: discord.ext.commands.Context):
    await ctx.message.add_reaction(emoji="üîü")


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.command()
async def stats(ctx: discord.ext.commands.Context):
    await ctx.message.delete()
    emb_list = datacommm.user_stats_emb(ctx=ctx, StatsList=UserStats)
    emb = discord.Embed(color=discord.colour.Color.dark_magenta(),
                        title=emb_list[0], description=emb_list[1])
    await ctx.send(embed=emb)


# —Å–ø–∞–º –ª–∏–Ω–∫–æ–º –≤ —á–∞—Ç–µ
@bot.command()
async def bomb(ctx: discord.ext.commands.Context):
    for role in ctx.author.roles:
        if role.name == params.accessparams['banfunc']:
            return
    await ctx.message.delete()
    await simplecomm.bomb(ctx)


# –í—ã–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∞–Ω–¥–∞—Ö
@bot.command(name='–ø–æ–º–æ—â—å')
async def commands_information(ctx: discord.ext.commands.Context):
    await ctx.send('```{0}```'.format(textfile.RadAll(config.params['info'])))


# –ì–†–£–ü–ü–ê


# –ì—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.group(nane='info')
async def info(ctx: discord.ext.commands.Context):
    await ctx.message.delete()


# –ü–æ–∫–∞–∑–∞—Ç—å id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
@info.command(name='channelid')
async def find_channel_id(ctx: discord.ext.commands.Context):
    await ctx.send('```Channel id: {0}```'.format(ctx.channel.id))


# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
@info.command(name='guild')
async def guild_information(ctx: discord.ext.commands.Context):
    await ctx.send('```{0}```'.format(infocomm.get_guild_information(ctx=ctx)))


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∏—Å–∫–æ—Ä–¥–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@info.command(name='member')
async def member_information(ctx: discord.ext.commands.Context):
    await ctx.send('```{0}```'.format(infocomm.get_member_information(ctx=ctx)))


# –ì–†–£–ü–ü–ê


# –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@bot.group(nane='mod')
@commands.has_guild_permissions(manage_channels=True)
async def mod(ctx: discord.ext.commands.Context):
    await ctx.message.delete()


# –£—Ç—Å–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –º—É—Ç–∞
@mod.command(name='moot')
async def give_moot(ctx: discord.ext.commands.Context):
    await moderationcomm.give_timer_role(bot=bot, ctx=ctx, RoleList=guild.roles, rolename=params.accessparams['moot'])


# –£—Ç—Å–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –¥–ª—è –≤–æ–π—Å –º—É—Ç–∞
@mod.command(name='voicemoot')
async def give_voice_moot(ctx: discord.ext.commands.Context):
    await moderationcomm.\
        give_timer_role(bot=bot, ctx=ctx, RoleList=guild.roles, rolename=params.accessparams['voicemoot'])


# –£—Ç—Å–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@mod.command(name='banfunc')
async def give_ban_func(ctx: discord.ext.commands.Context):
    await moderationcomm.\
        give_timer_role(bot=bot, ctx=ctx, RoleList=guild.roles, rolename=params.accessparams['banfunc'])


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@mod.command(name='clearmes')
async def clearmes(ctx: discord.ext.commands.Context):
    await moderationcomm.deletemessages(bot, ctx=ctx, stats=UserStats)


# –ì–†–£–ü–ü–ê


# –ì—Ä—É–ø–ø–∞ –∫–æ–∞–Ω–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.group(nane='set')
@commands.has_guild_permissions(manage_channels=True)
async def set(ctx: discord.ext.commands.Context):
    await ctx.message.delete()


# –£—Ç—Å–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@set.command(name='banfunc')
async def set_ban_func_role(ctx: discord.ext.commands.Context):
    await settingscomm.set_Access_role(bot=bot, accessname='banfunc', ctx=ctx)


# –£—Ç—Å–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@set.command(name='moot')
async def set_moot_role(ctx: discord.ext.commands.Context):
    await settingscomm.set_Access_role(bot=bot, accessname='moot', ctx=ctx)


# –£—Ç—Å–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@set.command(name='voicemoot')
async def set_voice_moot_role(ctx: discord.ext.commands.Context):
    await settingscomm.set_Access_role(bot=bot, accessname='voicemoot', ctx=ctx)


# –ì–†–£–ü–ü–ê


# –ì—Ä—É–ø–ø–∞ —Å–∏—Å—Ç–µ–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥
@bot.group(nane='sys')
@commands.has_guild_permissions(manage_channels=True)
async def sys(ctx: discord.ext.commands.Context):
    await ctx.message.delete()


@sys.command(name='recalc_stats')
async def sys_recalc_all(ctx: discord.ext.commands.Context):
    NewStats = []
    await dilogcomm.printlog(bot=bot,
                             message=await datacommm.calc_alltxtchannels_stats_after_time(guild=guild, time=None,
                                                                                          MainStatList=NewStats))
    global UserStats
    for stat in UserStats:
        stat.clear()
    UserStats = datacommm.merge_stats(UserStats, NewStats)


# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
@sys.command(name='write')
async def write_txt(ctx: discord.ext.commands.Context):
    await systemcomm.writestats(bot=bot, UserStats=UserStats)


# –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
@sys.command(name='off')
async def sys_shutdown(ctx: discord.ext.commands.Context):
    await systemcomm.writestats(bot=bot, UserStats=UserStats)
    params.shutdownparams['time'] = datetime.strftime(datetime.utcnow(), "%Y-%m-%d %H:%M:%S")
    textfile.WriteParams(params.shutdownparams, config.params['shutdown_info'], delsymb='=')
    await dilogcomm.printlog(bot=bot, message='bot offline')
    await bot.close()



# –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é settings —Å –∫–ª—é—á–æ–º token, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
print('boot')
bot.run(con_config.settings['token'])
